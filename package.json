{
  "name": "co-locate",
  "displayName": "Co-Locate",
  "publisher": "ecm",
  "description": "A VS Code extension to define relationships and navigate easily between files in your project.",
  "version": "0.17.0",
  "engines": {
    "vscode": "^1.78.0"
  },
  "vsce": {
    "dependencies": true,
    "yarn": false
  },
  "categories": [
    "Other"
  ],
  "activationEvents": [
    "onStartupFinished"
  ],
  "main": "./out/extension.js",
  "scripts": {
    "vscode:package": "echo 'Packaging...' && vsce package",
    "vscode:prepublish": "npm run lint && npm run test",
    "vscode:publish:patch": "echo 'Publishing patch version...' && vsce publish patch --allow-missing-repository --pre-release",
    "vscode:publish:minor": "echo 'Publishing minor version...' && vsce publish minor --allow-missing-repository --pre-release",
    "vscode:publish:major": "echo 'Publishing major version...' && vsce publish major --allow-missing-repository --pre-release",
    "vscode:login": "vsce login ecm",
    "vscode:help": "vsce help",
    "vscode:list-files": "vsce ls",
    "precompile": "echo 'Cleaning old output...' && rm -rf ./out",
    "compile": "echo 'Compiling...' && tsc -build ./",
    "watch": "tsc -watch -p ./",
    "lint": "echo 'Linting...' && eslint src --ext ts --fix --cache --report-unused-disable-directives",
    "pretest": "npm run compile",
    "test": "echo 'Testing...' && vitest run --coverage -- ",
    "pretest:changed": "npm run compile",
    "test:changed": "echo 'Testing...' && vitest run --coverage --changed HEAD~1"
  },
  "devDependencies": {
    "@eliasm307/config": "^0.18.0",
    "@types/node": "^18.16.9",
    "@types/vscode": "^1.78.0",
    "@typescript-eslint/eslint-plugin": "^5.59.5",
    "@typescript-eslint/parser": "^5.59.5",
    "@vitest/coverage-c8": "^0.31.0",
    "@vscode/test-electron": "^2.3.2",
    "@vscode/vsce": "^2.19.0",
    "eslint": "^8.40.0",
    "typescript": "^5.0.4",
    "vitest": "^0.31.0",
    "yarn": "^1.22.19"
  },
  "capabilities": {
    "untrustedWorkspaces": {
      "supported": true
    }
  },
  "contributes": {
    "commands": [
      {
        "command": "coLocate.navigateCommand",
        "title": "Open related..."
      }
    ],
    "menus": {
      "explorer/context": [
        {
          "command": "coLocate.navigateCommand",
          "when": "isFileSystemResource && !explorerResourceIsFolder && resourcePath in coLocate.filePathsWithLinks",
          "group": "navigation@1"
        }
      ],
      "editor/title/context": [
        {
          "command": "coLocate.navigateCommand",
          "when": "isFileSystemResource && !explorerResourceIsFolder && resourcePath in coLocate.filePathsWithLinks",
          "group": "1_close@1"
        }
      ]
    },
    "configuration": {
      "type": "object",
      "title": "Co-Locate",
      "properties": {
        "coLocate.fileTypes": {
          "markdownDescription": "Defines the file types in a project that will be evaluated for co-location linking.\n\n**NOTE** The property keys are the names of the file type matched by the pattern, which will be used in the UI",
          "scope": "window",
          "type": "object",
          "minProperties": 2,
          "default": {
            "Source": {
              "marker": "ðŸ’»",
              "patterns": [
                "\\/src\\/(?!\\.test\\.|\\.spec\\.)(.+)\\.(js|jsx|ts|tsx)$"
              ]
            },
            "Test": {
              "marker": "ðŸ§ª",
              "patterns": [
                "\\/test\\/(.+)\\.(test|spec)\\.(js|jsx|ts|tsx)$"
              ]
            }
          },
          "patternProperties": {
            ".+": {
              "type": "object",
              "properties": {
                "marker": {
                  "description": "A marker (e.g. an emoji) to show as badges in the file explorer on files related to this type of file",
                  "type": "string",
                  "default": "",
                  "maxLength": 1
                },
                "patterns": {
                  "markdownDescription": "RegEx patterns that should match relevant files and capture the part of the path that will be constant for sibling pattern group items (aka the key path).\n\nThe key path capture group can either be:\n1. the first unnamed group\n2. a group named 'key' (for example `\\\\/(test|tests)\\\\/(?<key>.*)\\\\.test\\\\.ts$`).\n\n**NOTES**\n1. This should only match 1 related file type, if multiple can be matched then they should be defined as separate types.\n2. This will be used to evaluate files and also folder paths, so an extension should be included if possible to prevent matching folders",
                  "type": "array",
                  "items": {
                    "type": "string",
                    "minLength": 1
                  },
                  "minItems": 1,
                  "default": [],
                  "uniqueItems": true
                },
                "onlyLinkTo": {
                  "markdownDescription": "(**OPTIONAL**) The names of other file types that this file type produces links to.\n\nBy default (ie when not defined), all file types can be linked to all other file types.\n\n**NOTE** Setting this to an empty array will prevent this file type from being related to any other file types, ie it will not have shortcuts from it but other file types can have shortcuts to it",
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "uniqueItems": true
                }
              },
              "required": [
                "marker",
                "patterns"
              ]
            }
          },
          "additionalProperties": false
        },
        "coLocate.ignorePatterns": {
          "description": "Defines the RegEx patterns of files to ignore when determining file links",
          "scope": "window",
          "type": "array",
          "default": [
            "\\/node_modules\\/"
          ],
          "items": {
            "type": "string"
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  }
}
